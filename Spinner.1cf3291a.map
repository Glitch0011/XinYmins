{"version":3,"sources":["components/Spinner.vue"],"names":[],"mappings":"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","file":"Spinner.1cf3291a.map","sourceRoot":"..","sourcesContent":["<template>\r\n  <div id=\"spinner\">\r\n    <div id=\"drawing\" ref=\"drawing\" v-show=\"!disabled\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\r\n  var angleInRadians = (angleInDegrees-90) * Math.PI / 180.0;\r\n\r\n  return {\r\n    x: centerX + (radius * Math.cos(angleInRadians)),\r\n    y: centerY + (radius * Math.sin(angleInRadians))\r\n  };\r\n}\r\n\r\nfunction describeArc(x, y, radius, innerRadius, startAngle, endAngle){\r\n\r\n    var outerStart = polarToCartesian(x, y, radius, endAngle);\r\n    var outerEnd = polarToCartesian(x, y, radius, startAngle);\r\n\r\n    var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n    var innerStart = polarToCartesian(x, y, innerRadius, endAngle);\r\n    var innerEnd = polarToCartesian(x, y, innerRadius, startAngle);\r\n\r\n    var mid = { x: (outerEnd.x + innerEnd.x) / 2, y: (outerEnd.y + innerEnd.y) / 2 };\r\n\r\n    var d = [\r\n        //\"M\", x, y,\r\n        \"M\", mid.x, mid.y,\r\n        \"L\", innerEnd.x, innerEnd.y,\r\n        \"A\", innerRadius, innerRadius, 0, largeArcFlag, 1, innerStart.x, innerStart.y,\r\n        \"L\", outerStart.x, outerStart.y,\r\n        \"A\", radius, radius, 0, largeArcFlag, 0, outerEnd.x, outerEnd.y,\r\n        \"L\", innerEnd.x, innerEnd.y,\r\n    ].join(\" \");\r\n\r\n    return d;       \r\n}\r\n\r\nexport default {\r\n  name: 'spinner-component',\r\n  props: {\r\n    \"tasks\": Array,\r\n    \"timeStart\": Object,\r\n    \"timeNow\": Object,\r\n    \"timeEnd\": Object,\r\n    \"innerRadiusPercentage\": {\r\n      type: Number,\r\n      default: 0.3\r\n    },\r\n    \"chunkPadding\": {\r\n      type: Number,\r\n      default: 5\r\n    },\r\n    \"chunkStroke\": {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    \"progressColour\": {\r\n      type: String,\r\n      default: \"blue\"\r\n    },\r\n    \"chunkColour\": {\r\n      type: String,\r\n      default: \"pink\"\r\n    },\r\n    \"chunkLuminosity\": {\r\n      type: String,\r\n      default: \"bright\"\r\n    },\r\n    \"disabled\": false\r\n  },\r\n  data () {\r\n    return {\r\n      svgChunks: null,\r\n      svgProgress: null,\r\n      total: 360,\r\n      canvasSize: 500,\r\n      size: null,\r\n      radius: null,\r\n      innerRadius: null,\r\n      x: null,\r\n      y: null,\r\n      svg: null\r\n    }\r\n  },\r\n  mounted: async function() {\r\n\r\n    this.handleResize();\r\n\r\n    let SVG = await import(\"svg.js\");\r\n\r\n    this.svg = SVG(\"drawing\").size(this.canvasSize,this.canvasSize);\r\n\r\n    this.svgChunks = [];\r\n\r\n    this.UpdateChunks();\r\n\r\n    // Draw time\r\n    this.UpdateSvg();\r\n\r\n    window.addEventListener('resize', this.handleResize)\r\n  },\r\n  beforeDestroy: function () {\r\n    window.removeEventListener('resize', this.handleResize)\r\n  },\r\n  watch: {\r\n    tasks: function(val) {\r\n\r\n      console.log(\"Updating tasks\");\r\n      \r\n      this.svgChunks = [];\r\n      this.svgProgress = null;\r\n      this.svg.clear();\r\n    \r\n      this.UpdateChunks();\r\n      this.UpdateSvg();\r\n    },\r\n    timeNow: function(val) {\r\n\r\n      if (this.canvasSize != Math.min(this.$refs[\"drawing\"].clientWidth,this.$refs[\"drawing\"].clientHeight)) {\r\n        this.handleResize();\r\n      }\r\n      \r\n      if (this.svg == null)\r\n        return;\r\n\r\n      if (this.timeNow > this.timeEnd) {\r\n        return;\r\n      }\r\n\r\n      this.UpdateChunks();\r\n      this.UpdateSvg();\r\n    }\r\n  },\r\n  computed: {\r\n    TotalProgress: function() {\r\n\r\n      let timePassed = this.timeNow - this.timeStart;\r\n      let timeTotal = this.timeEnd - this.timeStart;\r\n\r\n      let ratio = timePassed/timeTotal;\r\n      let angle = ratio * this.total;\r\n\r\n      return angle;\r\n    }\r\n  },\r\n  methods: {\r\n    handleResize() {\r\n      this.canvasSize = Math.min(this.$refs[\"drawing\"].clientWidth,this.$refs[\"drawing\"].clientHeight);\r\n\r\n      this.canvasPadding = 20;\r\n\r\n      this.size = this.canvasSize - this.canvasPadding;\r\n\r\n      this.radius = (this.size/2);\r\n      this.innerRadius = this.radius - (this.radius * this.innerRadiusPercentage);\r\n\r\n      this.x = (this.canvasPadding/2) + this.size/2;\r\n      this.y = (this.canvasPadding/2) + this.size/2;\r\n\r\n      if (this.svg) {\r\n\r\n\r\n        this.svg.size(this.canvasSize,this.canvasSize);        \r\n      }\r\n    },\r\n    UpdateChunks: async function() {\r\n\r\n      if (this.tasks == null)\r\n        return;\r\n\r\n      let current = 0;\r\n\r\n      let lastStopTime = this.timeStart;\r\n      let spaceUsed = null;\r\n      let firstFlexibleChunk = true;\r\n\r\n      for (let i = 0; i < this.tasks.length; i++) {\r\n        \r\n        let task = this.tasks[i];\r\n        let chunkSize = this.total / this.tasks.length;\r\n\r\n        if (task.stopTime) {\r\n          \r\n          let timePassed = task.stopTime - lastStopTime\r\n          let timeTotal = this.timeEnd - this.timeStart;\r\n          let ratio = timePassed / timeTotal;\r\n\r\n          chunkSize = ratio * this.total\r\n\r\n          lastStopTime = task.stopTime;\r\n          \r\n          spaceUsed = current + chunkSize;\r\n\r\n        } else {\r\n\r\n          let notCompletedTasks = this.tasks.length - this.tasks.filter(i=>i.stopTime != null).length;\r\n          let spaceLeft = this.total - spaceUsed;\r\n          let spacePerChunk = spaceLeft / notCompletedTasks;\r\n\r\n          if (current + spacePerChunk < this.TotalProgress && firstFlexibleChunk) {\r\n            firstFlexibleChunk = false;\r\n\r\n            chunkSize = this.TotalProgress - spaceUsed;\r\n\r\n            spaceUsed = current + chunkSize;\r\n\r\n          } else {\r\n            \r\n            if (!firstFlexibleChunk) {\r\n              notCompletedTasks--;  \r\n            }\r\n\r\n            spacePerChunk = spaceLeft / notCompletedTasks;\r\n\r\n            chunkSize = spacePerChunk;\r\n          }\r\n        }\r\n\r\n        if (this.tasks[i].colour == null) {\r\n\r\n          let randomcolor = await import(\"randomcolor\");\r\n\r\n          this.tasks[i].colour = randomcolor({\r\n              hue: this.chunkColour,\r\n              luminosity: this.chunkLuminosity\r\n            });\r\n        }\r\n\r\n        let chunk = null;\r\n\r\n        if (this.svgChunks.length <= i) {\r\n\r\n          chunk = this.drawChunk(\r\n            this.x, \r\n            this.y,\r\n            this.radius,\r\n            this.innerRadius,\r\n            current,\r\n            current + chunkSize - (this.chunkPadding));\r\n\r\n          this.svgChunks.push(chunk);\r\n\r\n        } else {\r\n\r\n          chunk = this.drawChunk(\r\n            this.x, \r\n            this.y,\r\n            this.radius,\r\n            this.innerRadius,\r\n            current,\r\n            current + chunkSize - (this.chunkPadding),\r\n            this.svgChunks[i]);\r\n\r\n          this.svgChunks[i] = chunk;\r\n        }\r\n        \r\n        chunk.fill(this.tasks[i].colour);\r\n        chunk.stroke({width:this.chunkStroke});\r\n\r\n        current += chunkSize;\r\n      }\r\n    },\r\n    drawChunk: function(x, y, radius, innerRadius, start, end, svg) {\r\n      \r\n      if (svg == null) {\r\n\r\n        svg = {\r\n          outer: null,\r\n          inner: null,\r\n          fill: function(a) {\r\n            this.outer.fill(a);\r\n            return this;\r\n          },\r\n          stroke: function(a) {\r\n            this.outer.stroke(a);\r\n            return this;\r\n          },\r\n          front: function(a) {\r\n            this.outer.front(a);\r\n            return this;\r\n          }\r\n        };\r\n      }\r\n\r\n      if (svg && svg.outer) {\r\n        svg.outer.plot(describeArc(x, y, radius, innerRadius, start, end));\r\n      } else {\r\n        if (this.svg) {\r\n          svg.outer = this.svg.path(describeArc(x, y, radius, innerRadius, start, end));\r\n        }\r\n      }\r\n\r\n      return svg;\r\n    },\r\n    UpdateSvg: function() {\r\n      \r\n      this.svgProgress = this.drawChunk(this.x, this.y, this.radius, this.innerRadius, 0, Math.max(0, this.TotalProgress - this.chunkPadding), this.svgProgress)\r\n        .fill({color: this.progressColour, opacity: 0.6})\r\n        .stroke({width: this.chunkStroke})\r\n        .front();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\">\r\n  #spinner {\r\n    color: #56b983;\r\n  }\r\n  #drawing {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n</style>"]}