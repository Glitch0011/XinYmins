{"version":3,"sources":["components/Spinner.vue"],"names":[],"mappings":"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","file":"Spinner.445965db.map","sourceRoot":"..","sourcesContent":["<template>\r\n  <div id=\"spinner\">\r\n    <div id=\"drawing\" ref=\"drawing\" v-show=\"!disabled\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\r\n  var angleInRadians = (angleInDegrees-90) * Math.PI / 180.0;\r\n\r\n  return {\r\n    x: centerX + (radius * Math.cos(angleInRadians)),\r\n    y: centerY + (radius * Math.sin(angleInRadians))\r\n  };\r\n}\r\n\r\nfunction describeArc(x, y, radius, innerRadius, startAngle, endAngle){\r\n\r\n    var outerStart = polarToCartesian(x, y, radius, endAngle);\r\n    var outerEnd = polarToCartesian(x, y, radius, startAngle);\r\n\r\n    var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n    var innerStart = polarToCartesian(x, y, innerRadius, endAngle);\r\n    var innerEnd = polarToCartesian(x, y, innerRadius, startAngle);\r\n\r\n    var mid = { x: (outerEnd.x + innerEnd.x) / 2, y: (outerEnd.y + innerEnd.y) / 2 };\r\n\r\n    var d = [\r\n        //\"M\", x, y,\r\n        \"M\", mid.x, mid.y,\r\n        \"L\", innerEnd.x, innerEnd.y,\r\n        \"A\", innerRadius, innerRadius, 0, largeArcFlag, 1, innerStart.x, innerStart.y,\r\n        \"L\", outerStart.x, outerStart.y,\r\n        \"A\", radius, radius, 0, largeArcFlag, 0, outerEnd.x, outerEnd.y,\r\n        \"L\", innerEnd.x, innerEnd.y,\r\n    ].join(\" \");\r\n\r\n    return d;       \r\n}\r\n\r\nexport default {\r\n  name: 'spinner-component',\r\n  props: {\r\n    \"tasks\": Array,\r\n    \"timeStart\": Object,\r\n    \"timeNow\": Object,\r\n    \"timeEnd\": Object,\r\n    \"innerRadiusPercentage\": {\r\n      type: Number,\r\n      default: 0.3\r\n    },\r\n    \"chunkPadding\": {\r\n      type: Number,\r\n      default: 5\r\n    },\r\n    \"chunkStroke\": {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    \"progressColour\": {\r\n      type: String,\r\n      default: \"blue\"\r\n    },\r\n    \"chunkColour\": {\r\n      type: String,\r\n      default: \"pink\"\r\n    },\r\n    \"chunkLuminosity\": {\r\n      type: String,\r\n      default: \"bright\"\r\n    },\r\n    \"disabled\": false\r\n  },\r\n  data () {\r\n    return {\r\n      svgChunks: null,\r\n      svgProgress: null,\r\n      total: 360,\r\n      size: null,\r\n      radius: null,\r\n      innerRadius: null,\r\n      canvasSize: 0,\r\n      x: null,\r\n      y: null,\r\n      svg: null\r\n    }\r\n  },\r\n  mounted: async function() {\r\n\r\n    this.handleResize();\r\n\r\n    let SVG = await import(\"svg.js\");\r\n\r\n    this.svg = SVG(\"drawing\").size(this.canvasSize, this.canvasSize);\r\n\r\n    this.svgChunks = [];\r\n\r\n    this.UpdateChunks();\r\n\r\n    // Draw time\r\n    this.UpdateSvg();\r\n\r\n    window.addEventListener('resize', this.handleResize);\r\n    this.$forceUpdate();\r\n  },\r\n  beforeDestroy: function () {\r\n    window.removeEventListener('resize', this.handleResize)\r\n  },\r\n  watch: {\r\n    tasks: function(val) {\r\n\r\n      console.log(\"Updating tasks\");\r\n      \r\n      this.svgChunks = [];\r\n      this.svgProgress = null;\r\n      this.svg.clear();\r\n    \r\n      this.UpdateChunks();\r\n      this.UpdateSvg();\r\n    },\r\n    canvasSize: function(val) {\r\n      this.handleResize();\r\n    },\r\n    timeNow: function(val) {\r\n      \r\n      if (this.svg == null)\r\n        return;\r\n\r\n      if (this.timeNow > this.timeEnd) {\r\n        return;\r\n      }\r\n\r\n      this.UpdateChunks();\r\n      this.UpdateSvg();\r\n    }\r\n  },\r\n  computed: {\r\n    TotalProgress: function() {\r\n\r\n      let timePassed = this.timeNow - this.timeStart;\r\n      let timeTotal = this.timeEnd - this.timeStart;\r\n\r\n      let ratio = timePassed/timeTotal;\r\n      let angle = ratio * this.total;\r\n\r\n      return angle;\r\n    }\r\n  },\r\n  methods: {\r\n    calculateSize() {\r\n      this.canvasSize = this.$refs[\"drawing\"] ? \r\n        Math.min(624, Math.min(this.$refs[\"drawing\"].clientWidth,this.$refs[\"drawing\"].clientHeight)) :\r\n        null;\r\n    },\r\n    handleResize() {\r\n      //this.canvasSize = Math.min(this.$refs[\"drawing\"].clientWidth,this.$refs[\"drawing\"].clientHeight);\r\n\r\n      this.calculateSize();\r\n\r\n      this.canvasPadding = 20;\r\n\r\n      this.size = this.canvasSize - this.canvasPadding;\r\n\r\n      this.radius = (this.size/2);\r\n      this.innerRadius = this.radius - (this.radius * this.innerRadiusPercentage);\r\n\r\n      this.x = (this.canvasPadding/2) + this.size/2;\r\n      this.y = (this.canvasPadding/2) + this.size/2;\r\n\r\n      if (this.svg) {\r\n        this.svg.size(this.canvasSize, this.canvasSize);\r\n        //this.$refs[\"drawing\"].width = this.canvasSize;\r\n        //this.$refs[\"drawing\"].height = this.canvasSize;\r\n\r\n      }\r\n    },\r\n    UpdateChunks: async function() {\r\n\r\n      if (this.tasks == null)\r\n        return;\r\n\r\n      let current = 0;\r\n\r\n      let lastStopTime = this.timeStart;\r\n      let spaceUsed = null;\r\n      let firstFlexibleChunk = true;\r\n\r\n      for (let i = 0; i < this.tasks.length; i++) {\r\n        \r\n        let task = this.tasks[i];\r\n        let chunkSize = this.total / this.tasks.length;\r\n\r\n        if (task.stopTime) {\r\n          \r\n          let timePassed = task.stopTime - lastStopTime\r\n          let timeTotal = this.timeEnd - this.timeStart;\r\n          let ratio = timePassed / timeTotal;\r\n\r\n          chunkSize = ratio * this.total\r\n\r\n          lastStopTime = task.stopTime;\r\n          \r\n          spaceUsed = current + chunkSize;\r\n\r\n        } else {\r\n\r\n          let notCompletedTasks = this.tasks.length - this.tasks.filter(i=>i.stopTime != null).length;\r\n          let spaceLeft = this.total - spaceUsed;\r\n          let spacePerChunk = spaceLeft / notCompletedTasks;\r\n\r\n          if (current + spacePerChunk < this.TotalProgress && firstFlexibleChunk) {\r\n            firstFlexibleChunk = false;\r\n\r\n            chunkSize = this.TotalProgress - spaceUsed;\r\n\r\n            spaceUsed = current + chunkSize;\r\n\r\n          } else {\r\n            \r\n            if (!firstFlexibleChunk) {\r\n              notCompletedTasks--;  \r\n            }\r\n\r\n            spacePerChunk = spaceLeft / notCompletedTasks;\r\n\r\n            chunkSize = spacePerChunk;\r\n          }\r\n        }\r\n\r\n        if (this.tasks[i].colour == null) {\r\n\r\n          let randomcolor = await import(\"randomcolor\");\r\n\r\n          this.tasks[i].colour = randomcolor({\r\n              hue: this.chunkColour,\r\n              luminosity: this.chunkLuminosity\r\n            });\r\n        }\r\n\r\n        let chunk = null;\r\n\r\n        if (this.svgChunks.length <= i) {\r\n\r\n          chunk = this.drawChunk(\r\n            this.x, \r\n            this.y,\r\n            this.radius,\r\n            this.innerRadius,\r\n            current,\r\n            current + chunkSize - (this.chunkPadding));\r\n\r\n          this.svgChunks.push(chunk);\r\n\r\n        } else {\r\n\r\n          chunk = this.drawChunk(\r\n            this.x, \r\n            this.y,\r\n            this.radius,\r\n            this.innerRadius,\r\n            current,\r\n            current + chunkSize - (this.chunkPadding),\r\n            this.svgChunks[i]);\r\n\r\n          this.svgChunks[i] = chunk;\r\n        }\r\n        \r\n        chunk.fill(this.tasks[i].colour);\r\n        chunk.stroke({width:this.chunkStroke});\r\n\r\n        current += chunkSize;\r\n      }\r\n    },\r\n    drawChunk: function(x, y, radius, innerRadius, start, end, svg) {\r\n      \r\n      if (svg == null) {\r\n\r\n        svg = {\r\n          outer: null,\r\n          inner: null,\r\n          fill: function(a) {\r\n            this.outer.fill(a);\r\n            return this;\r\n          },\r\n          stroke: function(a) {\r\n            this.outer.stroke(a);\r\n            return this;\r\n          },\r\n          front: function(a) {\r\n            this.outer.front(a);\r\n            return this;\r\n          }\r\n        };\r\n      }\r\n\r\n      if (svg && svg.outer) {\r\n        svg.outer.plot(describeArc(x, y, radius, innerRadius, start, end));\r\n      } else {\r\n        if (this.svg) {\r\n          svg.outer = this.svg.path(describeArc(x, y, radius, innerRadius, start, end));\r\n        }\r\n      }\r\n\r\n      return svg;\r\n    },\r\n    UpdateSvg: function() {\r\n      \r\n      this.svgProgress = this.drawChunk(this.x, this.y, this.radius, this.innerRadius, 0, Math.max(0, this.TotalProgress - this.chunkPadding), this.svgProgress)\r\n        .fill({color: this.progressColour, opacity: 0.6})\r\n        .stroke({width: this.chunkStroke})\r\n        .front();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\">\r\n  #spinner {\r\n    color: #56b983;\r\n  }\r\n  #drawing {\r\n    width: 90vmin;\r\n    max-width: 624px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n</style>"]}