{"version":3,"sources":["node_modules/randomcolor/randomColor.js"],"names":[],"mappings":"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","file":"randomColor.6bd887cc.map","sourceRoot":"..","sourcesContent":["// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        // Since we're generating multiple colors,\n        // incremement the seed. Otherwise we'd just\n        // generate the same color each time...\n        if (seed && options.seed) options.seed += 1;\n\n        colors.push(randomColor(options));\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue (options) {\n\n    var hueRange = getHueRange(options.hue),\n        hue = randomWithin(hueRange);\n\n    // Instead of storing red as two seperate ranges,\n    // we group them, using negative numbers\n    if (hue < 0) {hue = 360 + hue;}\n\n    return hue;\n\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      return Math.floor(range[0] + Math.random()*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n    }\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [19,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [47,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [63,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [179, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [258, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [283, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  return randomColor;\n}));\n"]}